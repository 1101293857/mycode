import numpy as np
import math
import random
import matplotlib.pyplot as plt
import time

file_name = "E:/suanfa/tsp225.tsp"
matrix1 = []
f = open(file_name)
citynum = 0   # 长度
start1=time.time()
for row in f.readlines():
    # 读入点的坐标
    matrix3=[]
    row=row.strip()
    if(len(row)==0):
        continue
    if(row[0]>="0" and row[0]<="9"):
        number = row.split()
        matrix3.append(float(number[1]))
        matrix3.append(float(number[2]))
        matrix1.append(matrix3)
        citynum=citynum+1
    else:
        continue
coordinates=matrix1.copy()
coordinates=np.array(coordinates)

def totaldistance(parent):  # 求路径长度
    total = 0
    for k in range(0, len(parent) - 1):
        total = total + distmat[parent[k]][parent[k + 1]]
    total = total + distmat[parent[len(parent) - 1]][parent[0]]
    return total
def getdistmat(coordinates):
    num = coordinates.shape[0]
    distmat = np.zeros((num, num))
    for i in range(num):
        for j in range(i, num):
            distmat[i][j] = distmat[j][i] = np.linalg.norm(coordinates[i] - coordinates[j])
    return distmat


distmat = getdistmat(coordinates)
numant = 50  # 蚂蚁个数
numcity = coordinates.shape[0]  # 城市个数
alpha = 1  # 信息素重要程度因子
beta = 5  # 启发函数重要程度因子
rho = 0.1  # 信息素的挥发速度
Q = 1
iter = 0
itermax = 250
etatable = 1.0 / (distmat + np.diag([1e10] * numcity))  # 启发函数矩阵，表示蚂蚁从城市i转移到矩阵j的期望程度
pheromonetable = np.ones((numcity, numcity))  # 信息素矩阵
pathtable = np.zeros((numant, numcity)).astype(int)  # 路径记录表
distmat = getdistmat(coordinates)  # 城市的距离矩阵
lengthaver = np.zeros(itermax)  # 各代路径的平均长度
lengthbest = np.zeros(itermax)  # 各代及其之前遇到的最佳路径长度
pathbest = np.zeros((itermax, numcity))  # 各代及其之前遇到的最佳路径长度

while iter < itermax:
    # 随机产生各个蚂蚁的起点城市
    if numant <= numcity:  # 城市数比蚂蚁数多
        pathtable[:, 0] = np.random.permutation(range(0, numcity))[:numant]
    else:  # 蚂蚁数比城市数多，需要补足
        pathtable[:numcity, 0] = np.random.permutation(range(0, numcity))[:]
        pathtable[numcity:, 0] = np.random.permutation(range(0, numcity))[:numant - numcity]
    length = np.zeros(numant)  # 计算各个蚂蚁的路径距离
    for i in range(numant):
        visiting = pathtable[i, 0]  # 当前所在的城市
        unvisited = set(range(numcity))  # 未访问的城市,以集合的形式存储{}
        unvisited.remove(visiting)  # 删除元素；利用集合的remove方法删除存储的数据内容
        for j in range(1, numcity):  # 循环numcity-1次，访问剩余的numcity-1个城市
            # 每次用轮盘法选择下一个要访问的城市
            listunvisited = list(unvisited)
            probtrans = np.zeros(len(listunvisited))
            for k in range(len(listunvisited)):
                probtrans[k] = np.power(pheromonetable[visiting][listunvisited[k]], alpha) \
                               * np.power(etatable[visiting][listunvisited[k]], beta)
            cumsumprobtrans = (probtrans / sum(probtrans)).cumsum()
            cumsumprobtrans -= np.random.rand()
            k = listunvisited[(np.where(cumsumprobtrans > 0)[0])[0]]  # python3中原代码运行bug，类型问题；鉴于此特找到其他方法
            # 通过where（）方法寻找矩阵大于0的元素的索引并返回ndarray类型，然后接着载使用[0]提取其中的元素，用作listunvisited列表中
            # 元素的提取（也就是下一轮选的城市）
            pathtable[i, j] = k  # 添加到路径表中（也就是蚂蚁走过的路径)
            unvisited.remove(k)  # 然后在为访问城市set中remove（）删除掉该城市
            length[i] += distmat[visiting][k]
            visiting = k
        length[i] += distmat[visiting][pathtable[i, 0]]  # 蚂蚁的路径距离包括最后一个城市和第一个城市的距离
        # 包含所有蚂蚁的一个迭代结束后，统计本次迭代的若干统计参数
    lengthaver[iter] = length.mean()
    pathbest1 = pathtable[length.argmin()].copy()
    flag = 1
    while flag > 0:
        flag = 0
        for kk in range(1, citynum - 3):
            for kkk in range(kk + 2, citynum - 1):
                if (distmat[pathbest1[kk - 1]][pathbest1[kkk]] + distmat[pathbest1[kk]][pathbest1[kkk + 1]] <distmat[pathbest1[kk - 1]][pathbest1[kk]] + distmat[pathbest1[kkk]][pathbest1[kkk + 1]]):
                    pathbest1[0:kk] = pathbest1[0:kk]
                    pathbest1[kk:kkk + 1] = pathbest1[kkk:kk - 1:-1]
                    pathbest1[kkk + 1:] = pathbest1[kkk + 1:]
                    flag = 1
    length1 = totaldistance(pathbest1)
    if iter == 0:
        lengthbest[iter] = length1
        pathbest[iter] = pathbest1
    else:
        if length1 > lengthbest[iter - 1]:
            lengthbest[iter] = lengthbest[iter - 1]
            pathbest[iter] = pathbest[iter - 1].copy()
        else:
            lengthbest[iter] = length1
            pathbest[iter] = pathbest1
    # 更新信息素
    pheromone_update_matrix = np.zeros_like(pheromonetable)
    for j in range(numant):
        if length[j]<lengthaver[iter]:
            current_update_value = Q / length[j]
            for i in range(numcity - 1):
                start = pathtable[j][i]
                end = pathtable[j][i + 1]
                pheromone_update_matrix[int(start)][int(end)] += current_update_value
            pheromone_update_matrix[int(pathtable[j][-1]), int(pathtable[j][0])] += current_update_value
    #给最好的路径信息素翻倍
    if (length1 == lengthbest[iter]):
        # 当前代最优路径和当前最优路径为同一条路径
        current_update_value = Q*2 / lengthbest[iter]
        for i in range(numcity - 1):
            start = pathbest[iter][i]
            end = pathbest[iter][i + 1]
            pheromone_update_matrix[int(start)][int(end)] += current_update_value
        pheromone_update_matrix[int(pathbest[iter][-1]), int(pathbest[iter][0])] += current_update_value
    else:
        # 当前代最优路径和当前最优路径不是同一条路径
        current_generation_update_value = Q*2 / length1
        current_update_value = Q*2 / lengthbest[iter]
        for i in range(numcity - 1):
            current_start = pathbest1[i]
            current_generation_start = pathbest[iter][i]
            current_end = pathbest1[i + 1]
            current_generation_end = pathbest[iter][i + 1]
            pheromone_update_matrix[int(current_start), int(current_end)] += current_update_value
            pheromone_update_matrix[
                int(current_generation_start), int(current_generation_end)] += current_generation_update_value
        pheromone_update_matrix[int(pathbest1[-1]), int(pathbest1[0])] += current_update_value
        pheromone_update_matrix[int(pathbest[iter][-1]), int(pathbest[iter][0])] += current_generation_update_value
    pheromonetable = (1 - rho) * pheromonetable + pheromone_update_matrix
    iter += 1  # 迭代次数指示器+1
    print("iter:", iter)

# 做出平均路径长度和最优路径长度
fig, axes = plt.subplots(nrows=2, ncols=1, figsize=(12, 10))
axes[0].plot(lengthaver, 'k', marker=u'')
axes[0].set_title('Average Length')
axes[0].set_xlabel(u'iteration')

axes[1].plot(lengthbest, 'k', marker=u'')
axes[1].set_title('Best Length')
axes[1].set_xlabel(u'iteration')
fig.savefig('average_best.png', dpi=500, bbox_inches='tight')
plt.show()
print(lengthbest[-1])

# 作出找到的最优路径图
bestpath = pathbest[-1]
print("length:", lengthbest[-1])
print("time:",time.time()-start1)
plt.figure()
x = []
y = []
for k in bestpath:
   x.append(matrix1[int(k)][0])
   y.append(matrix1[int(k)][1])
x.append(matrix1[int(bestpath[0])][0])
y.append(matrix1[int(bestpath[0])][1])
plt.plot(x, y)
plt.show()
