import numpy as np
import math
import random
import matplotlib.pyplot as plt
import time

file_name = "E:/suanfa/tsp225.tsp"
matrix1 = []
f = open(file_name)
i = 0
zqcount = 100  # 种群数量
iter = 1000
bianyi=0.5
ruozhe=0.5
qiangzhe=0.3
for row in f.readlines():  # 读入点的坐标
    matrix3 = []
    row = row.strip()
    if(len(row)==0):
        continue
    if (row[0] >= "0" and row[0] <= "9"):
        number = row.split()
        matrix3.append(float(number[1]))
        matrix3.append(float(number[2]))
        matrix1.append(matrix3)
        i = i + 1
    else:
        continue
matrix2 = np.zeros((i, i))
for k in range(0, i):  # 求出距离矩阵
    for j in range(k, i):
        if (k == j):
            matrix2[k][j] = 0
        else:
            xd = matrix1[k][0] - matrix1[j][0]
            yd = matrix1[k][1] - matrix1[j][1]
            rij = round(math.sqrt((xd * xd + yd * yd)))
            matrix2[k][j] = rij
            matrix2[j][k] = rij


# for i in range(0,70):
#     for j in range(0,70):
#         print(matrix2[i][j],"   ",end="")
def totaldistance(parent):  # 求路径长度
    total = 0
    for k in range(0, len(parent) - 1):
        total = total + matrix2[parent[k]][parent[k + 1]]
    total = total + matrix2[parent[len(parent) - 1]][parent[0]]
    return total
def initnum():  # 改良圈
    parent = []
    city = [x for x in range(0, i)]
    for k in range(0, zqcount):
        print(k)
        random.shuffle(city)
        flag=1
        while flag>0:
            flag=0
            for kk in range(1, i-3):
                for kkk in range(kk + 2, i - 1):
                    if (matrix2[city[kk - 1]][city[kkk]] + matrix2[city[kk]][city[kkk + 1]] < matrix2[city[kk - 1]][city[kk]] + matrix2[city[kkk]][city[kkk + 1]]):
                        city = city[0:kk] + city[kkk:kk - 1:-1] + city[kkk + 1:i + 1]
                        flag=1
        parent.append(city)
    return parent


# def creste():
#     f = np.zeros((len(s), 1))
#     for i in range(len(population)):
#         f[i][0] = totaldistance(s[i])
#     totalf = 0
#     for i in range(inn):
#         totalf = totalf + f[i][0]
#     for i in range(inn):
#         f[i][0] = f[i][0] / totalf
#     fsum = 0
#     for i in range(inn):
#         fsum = fsum + f[i][0] ** 15
#     ps = np.zeros((inn, 1))
#     for i in range(inn):
#         ps[i][0] = f[i][0] ** 15 / fsum
#     p = np.zeros((inn, 1))
#     p[0][0] = ps[0][0]
#     for i in range(1, inn):
#         p[i][0] = p[i - 1][0] + ps[i][0]

def cross(parent):  # 交叉繁殖  选择的是此交叉繁殖方法
    count = zqcount - len(parent)
    children = []
    while len(children) < count:
        male = random.randint(0, len(parent) - 1)
        female = random.randint(0, len(parent) - 1)
        if (male != female):
            male = parent[male]
            female = parent[female]
            left = random.randint(0, len(male) - 2)
            right = random.randint(left + 1, len(male) - 1)
            gene1 = male[left:right]
            gene2 = female[left:right]
            child1_c = male[right:] + male[:right]
            child2_c = female[right:] + female[:right]
            child1 = child1_c.copy()
            child2 = child2_c.copy()

            for o in gene2:
                child1_c.remove(o)

            for o in gene1:
                child2_c.remove(o)

            child1[left:right] = gene2
            child2[left:right] = gene1

            child1[right:] = child1_c[0:len(child1) - right]
            child1[:left] = child1_c[len(child1) - right:]

            child2[right:] = child2_c[0:len(child1) - right]
            child2[:left] = child2_c[len(child1) - right:]

            children.append(child1)
            children.append(child2)
    return children





def mutation(children):  # 变异
    for k in range(len(children)):
        if random.random() < bianyi:
            child = children[k]
            u = random.randint(1, len(child) - 4)
            v = random.randint(u + 1, len(child) - 3)
            w = random.randint(v + 1, len(child) - 2)
            child = child[0:u] + child[v:w] + child[u:v] + child[w:]
            children[k] = child
    return children


def select(population):  # 自然选择    保留强者 弱者有0.5的几率存活  前30%定义为强者
    graded = [[totaldistance(x), x] for x in population]
    graded = [x[1] for x in sorted(graded)]
    # 选出适应性强的染色体
    retain_length = int(len(graded) * qiangzhe)
    parents = graded[:retain_length]
    # 选出适应性不强，但是幸存的染色体
    for chromosome in graded[retain_length:]:
        if random.random() <ruozhe:
            parents.append(chromosome)
    return parents


population = initnum()
k = 0
best=[k for k in range(i)]
begin = time.time()
while k < iter:  # 迭代
    parents = select(population)
    bestpath=parents[0]
    if(totaldistance(bestpath)<totaldistance(best)):
        best=bestpath.copy()
    children = cross(parents)
    children = mutation(children)
    population = parents + children
    k = k + 1
    print(k)

end = time.time()
print(end - begin)


bestpath = best.copy()

print(totaldistance(bestpath))
bestpath.append(bestpath[0])
print(bestpath)
plt.figure()
x = []
y = []
for k in bestpath:
    x.append(matrix1[k][0])
    y.append(matrix1[k][1])
plt.plot(x, y)
plt.show()















